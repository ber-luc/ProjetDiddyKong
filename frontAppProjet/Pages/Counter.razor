@page "/counter/{Id:int}"
@using System.Text
@inject HttpClient Http
@inject NavigationManager UriHelper



<h1 class="title">Best jeux for EVER</h1>

<h2 class="pointsCount">Points : @currentCount</h2>


<div class="game">
    <h3 class="clickme">CLICK ME !</h3>
    <div class="game_monkey">
        <img src="/img/monkey-king.gif" alt="" @onclick="IncrementCount" class="zoominator">
    </div>
    <button class="btn btn-primary" @onclick="IncrementClickMe">Click <br> Coût : @clickMePrice<br> Puissance :
        @clickMe</button>
    <button class="btn btn-primary" @onclick="IncrementTimer">Timer <br> Coût : @timerPrice<br> Puissance :
        @pointTimer</button>
    <p>@message</p>
    <div class="timer">
        <h3>Time : @TimeActualHour : @TimeActualMinute : @TimeActualSecond</h3>
        <button class="btn btn-primary btn_save" @onclick="RegisterScore">Save</button>
        <button class="btn btn-primary btn_save" @onclick="DeleteCompte">Delete</button>
    </div>
</div>


@code {
    [Parameter]
    public int Id { get; set; }
    private double currentCount = 10000;
    private int clickMe;
    private int pointTimer;

    private double clickMePrice;

    private double clickMeIncr = 110;
    private int timerDelay = 3000;

    private double timerPrice;
    private double TimerIncr = 110;
    private int TimeActual;
    private string message = "";
    private clicker.model.User user;



    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await Http.GetFromJsonAsync<clicker.model.User>("https://micheul.alwaysdata.net/User/Load?id=" + Id);

        }
        catch (Exception e)
        {
            UriHelper.NavigateTo("/");
        }

        InitialisationToConnect();
        SetTimer();
        for (int i = 0; i < 3; i++)
        {
            i = 0;
            currentCount = currentCount + pointTimer;
            await Task.Delay(timerDelay);
            StateHasChanged();
        }
    }

    private void InitialisationToConnect()
    {
        Random aleatoire = new Random();
        TimerIncr = aleatoire.Next(95, 105);
        timerPrice = Math.Ceiling((user.TimerPower) * TimerIncr);
        pointTimer = user.TimerPower;
        currentCount = user.Score;
        clickMe = user.ClickPower;
        clickMeIncr = aleatoire.Next(95, 105);
        clickMePrice = Math.Ceiling((user.ClickPower) * clickMeIncr);
        TimeActual = user.Playtime;
        TimeActualSecond = user.Playtime % 60;
        TimeActualMinute = (user.Playtime / 60) % 60;
        TimeActualHour = ((user.Playtime / 60) / 60) % 60;
    }

    private void IncrementCount()
    {
        currentCount = currentCount + clickMe;
    }

    private void IncrementClickMe()
    {
        if (currentCount >= clickMePrice)
        {
            currentCount = currentCount - clickMePrice;
            clickMe++;
            Random aleatoire = new Random();

            clickMeIncr = aleatoire.Next(95, 105);
            clickMePrice = Math.Ceiling((clickMe) * clickMeIncr);
            message = "Félicitation pour ce merveilleux achat";
        }
        else
        {
            message = "Vous êtes trop pauvre";
        }
    }

    private void IncrementTimer()
    {
        if (currentCount >= timerPrice)
        {
            currentCount = currentCount - timerPrice;
            pointTimer++;
            Random aleatoire = new Random();

            TimerIncr = aleatoire.Next(95, 105);
            timerPrice = Math.Ceiling((pointTimer) * TimerIncr);
            message = "Félicitation pour ce merveilleux achat";
        }
        else
        {
            message = "Vous êtes trop pauvre";
        }
    }

    private long TimeActualHour = 00;
    private long TimeActualMinute = 00;
    private long TimeActualSecond = 00;

    private void SetTimer()
    {
        // Create a timer with a two second interval.
        System.Timers.Timer aTimer = new System.Timers.Timer(1000);
        // Hook up the Elapsed event for the timer.
        aTimer.Elapsed += OnTimedEvent;
        aTimer.AutoReset = true;
        aTimer.Enabled = true;
    }

    private void OnTimedEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        TimeActual++;
        TimeActualSecond++;
        if (TimeActualSecond >= 60)
        {
            TimeActualMinute++;
            TimeActualSecond = 0;
        }
        if (TimeActualMinute >= 60)
        {
            TimeActualHour++;
            TimeActualMinute = 0;
        }
        StateHasChanged();
    }

    private async void RegisterScore()
    {
        clicker.model.User UserToSave = new clicker.model.User()
        {
            Id = user.Id,
            Email = user.Email,
            Password = user.Password,
            Score = currentCount,
            ClickPower = clickMe,
            TimerPower = pointTimer,
            Playtime = TimeActual,
            Token = ""
        };
        await Http.PutAsJsonAsync<clicker.model.User>("https://micheul.alwaysdata.net/User/Save", UserToSave);
        UriHelper.NavigateTo("/fetchData");
    }

    private async void DeleteCompte()
    {
        await Http.DeleteAsync("https://micheul.alwaysdata.net/User/Delete/" + user.Id);
        UriHelper.NavigateTo("/fetchData");
    }
}
